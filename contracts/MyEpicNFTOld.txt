// SPDX-License-Identifier: UNLICENSED

pragma solidity ^0.8.1;

//Openzeppelin contracts
import "@openzeppelin/contracts/token/ERC721/extensions/ERC721URIStorage.sol";
import "@openzeppelin/contracts/utils/Counters.sol";
import "hardhat/console.sol";
string constant imageURI =  "data:application/json;base64,ewogICAgIm5hbWUiOiAiQm9yZWRFcGljT2N0b3B1cyIsCiAgICAiZGVzY3JpcHRpb24iOiAiQW4gRXBpYyB0aHJlZSB3b3JkIHBocmFzZSBsaXZpbmcgb24tY2hhaW4gYW5kIGZvcmV2ZXIgaW4gdGhlIGJsb2NrY2hhaW4iLAogICAgImltYWdlIjogImRhdGE6aW1hZ2Uvc3ZnK3htbDtiYXNlNjQsUEhOMlp5QjRiV3h1Y3owaWFIUjBjRG92TDNkM2R5NTNNeTV2Y21jdk1qQXdNQzl6ZG1jaUlIQnlaWE5sY25abFFYTndaV04wVW1GMGFXODlJbmhOYVc1WlRXbHVJRzFsWlhRaUlIWnBaWGRDYjNnOUlqQWdNQ0F6TlRBZ016VXdJajRLSUNBZ0lEeHpkSGxzWlQ0dVltRnpaU0I3SUdacGJHdzZJSGxsYkd4dmR6c2dabTl1ZEMxbVlXMXBiSGs2SUhObGNtbG1PeUJtYjI1MExYTnBlbVU2SURFMmNIZzdJSDA4TDNOMGVXeGxQZ29nSUNBZ1BISmxZM1FnZDJsa2RHZzlJakV3TUNVaUlHaGxhV2RvZEQwaU1UQXdKU0lnWm1sc2JEMGlZbXgxWlNJZ0x6NEtJQ0FnSUR4MFpYaDBJSGc5SWpVd0pTSWdlVDBpTlRBbElpQmpiR0Z6Y3owaVltRnpaU0lnWkc5dGFXNWhiblF0WW1GelpXeHBibVU5SW0xcFpHUnNaU0lnZEdWNGRDMWhibU5vYjNJOUltMXBaR1JzWlNJK1FtOXlaV1JGY0dsalQyTjBiM0IxY3p3dmRHVjRkRDRLUEM5emRtYysiCn0=";
// We inherit the contract we imported. This means we'll have access
// to the inherited contract's methods.
contract MyEpicNFT is ERC721URIStorage{
  // Magic given to us by OpenZeppelin to help us keep track of tokenIds.
  using Counters for Counters.Counter;
  Counters.Counter private _tokenIds;

  // We need to pass the name of our NFTs token and its symbol.
  constructor() ERC721 ("SquareNFT", "SQUARE") {
    console.log("This is my first NFT contract. wow!");
  }
 
    // A function our user will hit to get their NFT.
  function makeAnEpicNFT() public{
      // Get the current tokenId, this starts at 0.
      uint256 newItemId = _tokenIds.current();

      // Actually mint the NFT to the sender using msg.sender.
      _safeMint(msg.sender, newItemId);

      // Set the NFTs data.
      _setTokenURI(newItemId,imageURI);
      console.log("An NFT with ID %s has been minted to %s",newItemId,msg.sender);

      // Increment the counter for when the next NFT is minted.
      _tokenIds.increment();

  }

}